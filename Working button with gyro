#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>

#define BUTTON_PIN 10  // Button connected to digital pin 10

Adafruit_MPU6050 mpu;

void setup() {
  Serial.begin(115200);
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Enable internal pull-up resistor

  // Initialize the MPU6050
  if (!mpu.begin()) {
    Serial.println("MPU6050 not found! Check connections.");
    while (1) { delay(10); }
  }

  // Configure sensor ranges (adjust if needed)
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  Serial.println("MPU6050 Initialized!");
}

void loop() {
  // Read button state (1 = not pressed, 0 = pressed)
  int buttonState = digitalRead(BUTTON_PIN);

  // Read gyroscope data
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Define a threshold for significant rotation (in rad/s)
  float threshold = 0.3;  // You might need to adjust this based on testing

  // Determine direction based on gyroscope readings
  String direction = "STRAIGHT";

  // Compare the X and Y axis values to determine the dominant rotation
  if (abs(g.gyro.x) > abs(g.gyro.y)) {
    if (g.gyro.x > threshold) {
      direction = "RIGHT";
    } else if (g.gyro.x < -threshold) {
      direction = "LEFT";
    }
  } else {
    if (g.gyro.y > threshold) {
      direction = "DOWN";
    } else if (g.gyro.y < -threshold) {
      direction = "UP";
    }
  }

  // Output the button state and direction, separated by a comma
  Serial.print(buttonState);
  Serial.print(",");
  Serial.println(direction);

  delay(100);  // Adjust delay to control output speed
}
